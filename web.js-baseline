var express = require('express');
var socketio = require('socket.io');

var app = express.createServer(express.logger());
var io = socketio.listen(app);

var users = [];

app.configure(function() {
	// Error handler
	app.use(express.errorHandler({
		dumpExceptions: true,
		showStack: true
	}));

	// Static file management
	app.use('/js', express.static(__dirname + '/client/js'));
});

// Heroku won't actually allow us to use WebSockets
// so we have to setup polling instead.
// https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku
io.configure(function() {
	io.set("transports", ["xhr-polling"]);
	io.set("polling duration", 5);
	io.set('log level', 1);
	io.set('close timeout', 15);
});

app.get('/', function(request, response) {
	response.sendfile(__dirname + '/client/html/index.html');
});

io.sockets.on('connection', function (socket) {
	// Save the user
	users.push(socket);
	
	// Broadcast message to all users
	socket.on('message', function (data) {
		users.map( function(user) {
			user.emit('message', data);
		});
	});

	socket.on('disconnect', function() {
		// Remove the user
		var index = users.indexOf(this);
		if (index != -1) {
			users.splice(index, 1);
		}		
	});
});

var port = process.env.PORT || 5000;
app.listen(port, function() {
	console.log("Listening on " + port);
});
